<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[安装Docker]]></title>
    <url>%2F2017%2F08%2F26%2F%E5%AE%89%E8%A3%85Docker%2F</url>
    <content type="text"><![CDATA[声明：本安装文档以Ubuntu14.04为基础 前期准备1.更新系统1$ apt-get update 2.安装CA证书1$ apt-get install apt-transport-https ca-certificates 3.添加一个新的GPG键（GPG是加密和数字签名的免费工具，大多用于加密信息的传递）1$ apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D 4.添加源12vim /etc/apt/sources.list.d/docker.listdeb https://apt.dockerproject.org/repo ubuntu-trusty main 5.更新系统1$ apt-get update 6.获取可用的Docker版本1$ apt-cache policy docker-engine 7.安装推荐的包1$ apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual 8.安装额外的包1$ apt-get install linux-image-generic-lts-trusty 9.对包进行更新1$ apt-get update 安装docker1.对包进行更新1$ apt-get update 2.安装引1$ apt-get install docker-engine 配置DaoCloud的Docker加速器(国内registry-mirror)1.DaoCloud的Docker Hub Mirror服务可代替Docker官网的Docker Hub登录DaoCloud官网,注册用户并登录 2.获取添加加速器命令登录以后进入管理界面点击“加速器”标签，会弹出页面配置加速器中产生的命令，然后将此命令复制到linux的命令行中执行 3.重启Docker服务1$ service docker restart 验证操作1.查看docker版本1$ docker -v 2.启动docker守护进程1$ service docker start 3.验证docker是否正确安装1$ docker run hello-world ps:此命令下载的是一个测试镜像，它打印“Hello from Docker!”消息结束后退出。]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo的配置和使用]]></title>
    <url>%2F2017%2F07%2F05%2FGitHubPages%26HexoGuide%2F</url>
    <content type="text"><![CDATA[安装前提安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 如果您的电脑中已安装 Node.js , Git 的话，那么接下来就要用npm来安装Hexo了 GitHub Pages 仓库在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的账号名)。 在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。 简单来说，User Pages 与 Project Pages的区别是： User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。 用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。 User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。 User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。 Git配置name和email当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：12$ git config --global user.name &quot;username&quot;$ git config --global user.email &quot;username@example.com&quot; 查看git配置可以使用 -l 参数(l 就是 list 的首字母,L的小写):1$ git config -l 在某个项目根路径下面可以设置单独的Email与姓名.12$ git config user.name &quot;tiemaocsdn&quot;$ git config user.email &quot;tiemaocsdn@qq.com&quot; ssh配置查看是否已经有了ssh密钥：cd ~/.ssh 如果没有密钥则不会有此文件夹，有则备份删除 生存密钥：1$ ssh-keygen -t rsa -C &quot;username@example.com&quot; 按3个回车，密码为空。 最后得到了两个文件：id_rsa和id_rsa.pub 添加密钥到ssh：ssh-add id_rsa 需要之前输入密码。 在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥 git上进行测试1$ ssh git@github.com 返回结果123PTY allocation request failed on channel 0 Hi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access. Connection to github.com closed. github ssh配置完毕 Hexo安装如果上述必备程序已完成，那么接下来即可使用npm完成Hexo的安装1$ npm install -g hexo-cli Hexo建站安装Hexo完成后，Hexo需要在指定的文件夹init初始化，在你喜欢的文件夹内（例如D：\Hexo），点击鼠标右键选择Git bash，输入以下指令：1$ hexo init 接下来是安装依赖包，该命令会在当前文件夹内建立网站所需要的所有文件：1$ npm install 新建完成后，当前文件夹的目录如下：123456.├── _config.yml 网站的 配置 信息，您可以在此配置大部分的参数├── package.json 应用程序的信息├── scaffolds 模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件├── source 资源文件夹是存放用户资源的地方└── themes 主题文件夹。Hexo 会根据主题来生成静态页面。 现在可以通过下面的命令，搭建到本地预览一下12$ hexo generate$ hexo server 然后在浏览器输入localhost:4000查看 这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。 Hexo配置您可以在 _config.yml 中修改大部份的配置 找到这一个部分12deploy: type: 然后在github上仓库的ssh地址复制过来，修改后1234deploy: type: git repo: 对应仓库的SSH地址（可以在GitHub对应的仓库中复制） branch: 分支（User Pages为master，Project Pages为gh-pages） 为了能够使Hexo部署到GitHub上，需要安装一个插件：1$ npm install hexo-deployer-git --save 然后通过下面的命令发布到github的仓库上完成部署：12$ hexo generate$ hexo deploy theme配置如果想要使用其他主题，可以使用git clone将别人的主题拷贝到站点目录的\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字 个人推荐一个不错的主题：Next 详细步骤可以参考Next官网。 命令常用命令1234567$ npm install -g hexo-cli$ hexo init$ npm install$ hexo generate$ hexo server$ hexo clean$ hexo deploy 其他命令12345$ hexo new [layout] &lt;title&gt;$ hexo publish [layout] &lt;filename&gt;$ hexo render &lt;file1&gt; [file2] ...$ hexo list &lt;type&gt;$ hexo version]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>配置</tag>
      </tags>
  </entry>
</search>
